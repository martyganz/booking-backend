var express = require('express');
var { graphqlHTTP } = require('express-graphql');
var { buildSchema } = require('graphql');
const cors = require('cors');

const fs = require('fs');
const path = require('path');

let rawdata = fs.readFileSync(path.resolve(__dirname, 'mock.json'));
let klmMock = JSON.parse(rawdata);
console.log(klmMock)

const filtered=klmMock.filter(passanger => passanger.passengers.id === 1);
console.log("filtered",filtered)

// Construct a schema, using GraphQL schema language
var schema = buildSchema(`
  type Query {
    passengers(id: Int): [Passangers]
    retrieveBooking(bookingCode: String!, lastName: String!):RetrieveBooking
  }

  type PassangerTitle {
    code: String
    name: String
  }

  type Passangers {
   
    bookingCode: String
    
  }

  type RetrieveBooking {
    id: Int
    firstName: String
    lastName: String
    title: PassangerTitle
    bookingCode: String
  }
`);




// const getCourse = (args) => {
//   var id = args.id;
//   return coursesData.filter(course => course.id === id)[0];
// }

const getPassangers= (args) => {
  if(args.id){
    const passangerId= args.id;
    return klmMock.filter(passanger => passanger.passengers.id===passangerId);

  }else{
    return klmMock[0].passengers;
  }
}

const getRetrieveBooking= (args)=>{
  if(args.bookingCode && args.lastName){
    bookingCode=args.bookingCode;
    passangerLastName=args.lastName;
    const filteredData= klmMock.filter(details=>details.bookingCode === bookingCode && details.passangers.lastName===passangerLastName).map(item=> ({bookingCode:item.bookingCode, lastName:item.passangers.lastName}))
    console.log("filteredData",filteredData);
    return filteredData;
  }else{
    return { error: [{
      "statusCode": 403,
      "message": "There is no record with this credentials"
    }],
    data: null}
  }
}

// const updateCourseTopic = ({id,topic}) => {
//   coursesData.map(course=>{
//     if(course.id === id){
//       course.topic = topic;
//       return course;
//     }
//   })

//   return coursesData.filter(course => course.id === id)[0];
// }

// The root provides a resolver function for each API endpoint
var root = {
  passengers: getPassangers,
  retrieveBooking: getRetrieveBooking

};

var app = express().use(cors());
app.use('/graphql', graphqlHTTP({
  schema: schema,
  rootValue: root,
  graphiql: true,
}));
app.listen(4000);
console.log('Running a GraphQL API server at http://localhost:4000/graphql');